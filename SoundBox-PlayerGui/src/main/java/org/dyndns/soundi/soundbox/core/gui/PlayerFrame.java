/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Sep 23, 2011, 1:17:58 PM
 */
package org.dyndns.soundi.soundbox.core.gui;

import java.io.IOException;
import java.io.InputStream;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.dyndns.soundi.gui.interfaces.IPlayerGui;
import org.dyndns.soundi.gui.interfaces.PlayerEngine;
import org.dyndns.soundi.portals.interfaces.CommunicationAction;
import org.dyndns.soundi.portals.interfaces.Song;
import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceReference;
import org.osgi.service.event.Event;
import org.osgi.service.event.EventAdmin;

/**
 *
 * @author oli
 */
public class PlayerFrame extends javax.swing.JFrame implements IPlayerGui {

    private BundleContext cx;
    private PlayerEngine playerEngine;
    /** Creates new form MainFrame */
    public PlayerFrame(BundleContext cx, PlayerEngine playerEngine) {
        this.cx = cx;
        this.playerEngine = playerEngine;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("jButton1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(100, 100, 100))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void handleEvent(Event event) {

        setVisible(true);
        if (event.getTopic().equals(CommunicationAction.STARTPLAYERFROMSONG.toString())) {
            Song s = (Song) event.getProperty("song");
            ServiceReference ref = cx.getServiceReference(EventAdmin.class.getName());

            if (ref != null) {
                EventAdmin eventAdmin = (EventAdmin) cx.getService(ref);
                Dictionary properties = new Hashtable();
                properties.put("song", s);
                Event reportGeneratedEvent = new Event(CommunicationAction.GETSTREAMFROMSONG.toString(), properties);
                eventAdmin.sendEvent(reportGeneratedEvent);
            }
        }

        if (event.getTopic().equals(CommunicationAction.STREAMFROMSONG.toString())) {
            InputStream is = (InputStream) event.getProperty("stream");
            play(is);
        }
    }

    private void play(InputStream is) {
        byte[] b = new byte[4096];
        try {
            while (is.read(b) != -1) {
                System.out.println(b);
            }
        } catch (IOException ex) {
            Logger.getLogger(PlayerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}

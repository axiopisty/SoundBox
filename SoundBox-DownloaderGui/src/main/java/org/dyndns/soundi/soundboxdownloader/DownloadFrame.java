/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DownloadFrame.java
 *
 * Created on 05.10.2011, 10:41:13
 */
package org.dyndns.soundi.soundboxdownloader;

import java.awt.Point;
import java.util.Dictionary;
import java.util.Hashtable;
import javax.swing.SwingUtilities;
import org.dyndns.soundi.gui.interfaces.IDownloaderGui;
import org.dyndns.soundi.portals.interfaces.CommunicationAction;
import org.dyndns.soundi.portals.interfaces.Song;
import org.dyndns.soundi.utils.Util;
import org.dyndns.soundi.utils.Util.Component;
import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceReference;
import org.osgi.service.event.Event;
import org.osgi.service.event.EventAdmin;

/**
 *
 * @author oli
 */
public class DownloadFrame extends javax.swing.JFrame implements IDownloaderGui {

    private BundleContext cx;

    /** Creates new form DownloadFrame */
    public DownloadFrame(BundleContext cx) {
        initComponents();
        this.cx = cx;
        //setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("jLabel1");

        jButton1.setText("Download");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new DownloadTableModel());
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);
        jTable1.setDefaultRenderer(DownloadTableProgressBar.class, new DownloadTableProgressBar());
        jTable1.setDefaultRenderer(DownloadTableControl.class, new DownloadTableControl());

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 236, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(238, 238, 238))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1))
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        new Thread() {

            @Override
            public void run() {
                ServiceReference ref = cx.getServiceReference(EventAdmin.class.getName());
                if (ref != null) {
                    EventAdmin eventAdmin = (EventAdmin) cx.getService(ref);
                    Dictionary properties = new Hashtable();
                    for (int i = 0; i < jTable1.getRowCount(); i++) {
                        Song s = (Song) jTable1.getValueAt(i, 4);
                        properties.put("song", s);
                        Event reportGeneratedEvent = new Event(CommunicationAction.DOWNLOADSONG.toString(), properties);
                        eventAdmin.sendEvent(reportGeneratedEvent);
                    }
                }
            }
        }.start();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        Point click = new Point(evt.getX(), evt.getY());
        int column = jTable1.columnAtPoint(click);
        int row = jTable1.rowAtPoint(click);
        System.out.println("Retrieved click on X: " + evt.getX() + " Y: " + evt.getY());
    }//GEN-LAST:event_jTable1MouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void addSong(final Song song) {

        final DownloadTableModel model = (DownloadTableModel) jTable1.getModel();

        final Object[] rowData = {song.getSongName(), song.getArtist().getArtistName(),
            song.getAlbumName(), song.getTimeInSeconds(), song,
            new DownloadTableProgressBar(), new DownloadTableControl()};

        model.insertRow(model.getRowCount(), rowData);
    }

    @Override
    public void handleEvent(Event event) {
        if (event.getTopic().equals(CommunicationAction.ADDSONGTODOWNLOADQUEUE.toString())) {
            Song l = (Song) event.getProperty("song");
            addSong(l);
        } else if (event.getTopic().equals(CommunicationAction.DOWNLOADSTATECHANGED.toString())) {
            Song l = (Song) event.getProperty("song"); 
            int rowContainingThisSong = -1;
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                if (jTable1.getValueAt(i, 4).equals(l)) {
                    rowContainingThisSong = i;
                    break;
                }
            }
            Long bytesWritten = (Long) event.getProperty("writtenBytes");
            if (l.getContentLength() == 0 || l.getContentLength() == -1) {
                Util.sendMessage(Component.DOWNLOADER, "Sorry, did not get a content length field for that song...");
                return;
            }
            final int percent = (int) (bytesWritten * 100 / l.getContentLength());
            final int tmpRowContainingThisSong = rowContainingThisSong;
            ProgressbarThread progressbarThread = new ProgressbarThread(tmpRowContainingThisSong, percent, jTable1);
            SwingUtilities.invokeLater(progressbarThread);
        } else if (event.getTopic().equals(CommunicationAction.SETDOWNLOADERINVISIBLE.toString())) {
            this.setVisible(false);
        } else if (event.getTopic().equals(CommunicationAction.SETDOWNLOADERVISIBLE.toString())) {
            this.setVisible(true);
        }

    }
}
